<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[使用gulp压缩图片]]></title>
      <url>/post/gulp%E5%8E%8B%E7%BC%A9%E5%9B%BE%E7%89%87.html</url>
      <content type="html"><![CDATA[<p>这是我的博客处女作，献给了gulp。最近工作不忙，和同事想着将之前臃肿的项目用Gulp打包，这也是我第一次接触gulp，总结到一些打包图片的方法。</p>
<h2 id="全局安装gulp"><a href="#全局安装gulp" class="headerlink" title="全局安装gulp"></a>全局安装gulp</h2><p>安装gulp之前记得先安装nodejs及其包管理器npm</p>
<pre><code>$ npm install gulp -g
</code></pre><p>安装完成后，可使用以下命令查看版本</p>
<pre><code>$ gulp -v
</code></pre><h2 id="创建项目并本地安装gulp"><a href="#创建项目并本地安装gulp" class="headerlink" title="创建项目并本地安装gulp"></a>创建项目并本地安装gulp</h2><p>创建一个项目名为：gulp-demo，打开目录并运行npm init,会在当前项目下创建一个package.json文件，用来保存项目相关信息，包括项目名称、版本、作者、依赖包等</p>
<pre><code>$ mkdir gulp-demo
$ cd gulp-demo
$ npm init
</code></pre><p>如果是打包未应用打包工具的已有项目，全局安装gulp之后，直接进行本地安装即可</p>
<p>$ npm install –save-dev gulp</p>
<p>前面-g指全局安装，这里用–save-dev只是安装到项目目录，–save-dev安装后对应于package.json文件里”devDependencies”对象下的内容，此对象下的插件都是用于开发环境及上线前的插件，<br>正式环境不会存在。</p>
<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>下面所用的插件都是我本次内容所用到的，实际中按需要安装。</p>
<ul>
<li>gulp-cache 图片缓存，打包时只有替换过的图片才打包，加快打包速度</li>
<li>gulp-imagemin 压缩图片</li>
<li>imagemin-pngquant 深度压缩png图片</li>
<li>gulp-smushit 压缩jpg和png图片，压缩率比上面两种效果好</li>
</ul>
<p>安装方式</p>
<pre><code>$ npm install --save-dev &apos;插件名&apos;
</code></pre><h2 id="压缩图片"><a href="#压缩图片" class="headerlink" title="压缩图片"></a>压缩图片</h2><p>在项目根目录下创建gulpfile.js，用于放置gulp的配置。首先引入gulp及所需插件</p>
<pre><code>var gulp = require(&apos;gulp&apos;);
var imagemin = require(&apos;gulp-imagemin&apos;);
var pngquant = require(&apos;imagemin-pngquant&apos;);
var cache = require(&apos;gulp-cache&apos;);
var smushit = require(&apos;gulp-smushit&apos;);
</code></pre><h3 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1.基本使用"></a>1.基本使用</h3><p>本次压缩将源代码中src/images文件下的图片压缩到打包文件的dist/images文件夹下</p>
<pre><code>gulp.task(&apos;min-img&apos;, function () {
    gulp.src(&apos;src/images/*&apos;)
        .pipe(imagemin({
           optimizationLevel: 5, //默认：3  取值范围：0-7（优化等级）
           progressive: true, //默认：false 无损压缩jpg图片
           interlaced: true, //默认：false 隔行扫描gif进行渲染
           multipass: true //默认：false 多次优化svg直到完全优化
        }))
        .pipe(gulp.dest(&apos;dist/images&apos;));
});
</code></pre><p>简单使用时，imagemin的参数可不用配置，直接使用默认值</p>
<h3 id="2-深度压缩png图片"><a href="#2-深度压缩png图片" class="headerlink" title="2.深度压缩png图片"></a>2.深度压缩png图片</h3><pre><code>gulp.task(&apos;min-img&apos;, function () {
    gulp.src(&apos;src/images/*&apos;)
        .pipe(imagemin({
            progressive: true,
            svgoPlugins: [{removeViewBox: false}],
            use: [pngquant()] //使用pngquant深度压缩png图片
        }))
        .pipe(gulp.dest(&apos;dist/images&apos;));
});
</code></pre><h3 id="3-用”gulp-cache”只压缩修改的图片，未修改的图片直接从缓存文件读取"><a href="#3-用”gulp-cache”只压缩修改的图片，未修改的图片直接从缓存文件读取" class="headerlink" title="3.用”gulp-cache”只压缩修改的图片，未修改的图片直接从缓存文件读取"></a>3.用”gulp-cache”只压缩修改的图片，未修改的图片直接从缓存文件读取</h3><pre><code>gulp.task(&apos;min-img&apos;, function () {
    gulp.src(&apos;src/img/*&apos;)
        .pipe(cache(imagemin({
            progressive: true,
            svgoPlugins: [{removeViewBox: false}],
            use: [pngquant()]
        })))
        .pipe(gulp.dest(&apos;dist/img&apos;));
});
</code></pre><h3 id="4-使用gulp-smushit-实现大比例压缩"><a href="#4-使用gulp-smushit-实现大比例压缩" class="headerlink" title="4.使用gulp-smushit 实现大比例压缩"></a>4.使用gulp-smushit 实现大比例压缩</h3><p>以上压缩方式实际使用中压缩效果其实并不明显，压缩比例才10%左右。而使用gulp-smushit可实现大比例无损压缩，且配置非常简单。<br>但是缺点是：只识别jpg和png图片，且不识别中文命名，压缩速度慢、使用cache时压缩效果不明显。在此，对jpg/png图片用此插件压缩，其他类型图片依旧用前面的方式压缩。</p>
<pre><code>gulp.task(&apos;min-giImg&apos;, function () {
    gulp.src(&apos;public/images/!**!/!*.{gif,ico}&apos;)
        .pipe(cache(imagemin({
            progressive: true,
            svgoPlugins: [{removeViewBox: false}],
            interlaced: true,
            // use: [pngquant()]
        })))
        .pipe(gulp.dest(&apos;dist/images/&apos;));
});

gulp.task(&apos;min-pjImg&apos;, function () {
    gulp.src(&apos;public/images/!**!/!*.{png,jpg}&apos;)
        .pipe(smushit({
            verbose: true
        }))
        .pipe(gulp.dest(&apos;dist/images/&apos;));
});
</code></pre><p>这种方式总体可将图片压缩一半甚至更多</p>
<h2 id="其他优化图片方式"><a href="#其他优化图片方式" class="headerlink" title="其他优化图片方式"></a>其他优化图片方式</h2><p>推荐一个好用的压缩图片网址：<br>TinyPNG 可用于无损大比例压缩图片，地址：<a href="https://tinypng.com/developers" target="_blank" rel="external">https://tinypng.com/developers</a>.<br>使用简单，还提供开发API，不过每个月只免费500张，多了就得付费了.</p>
<!-- UY BEGIN -->
<p><div id="uyan_frame"></div></p>
<p><script type="text/javascript" src="http://v2.uyan.cc/code/uyan.js?uid=2148067"></script><br><!-- UY END --></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
